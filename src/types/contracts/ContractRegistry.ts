/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ContractRegistryInterface extends utils.Interface {
  functions: {
    "MARKETPLACE_NAME()": FunctionFragment;
    "ROLE_MANAGER_NAME()": FunctionFragment;
    "TOKEN_FACTORY_NAME()": FunctionFragment;
    "TOKEN_REGISTRY_NAME()": FunctionFragment;
    "__OwnableContractsRegistry_init()": FunctionFragment;
    "addContract(string,address)": FunctionFragment;
    "addProxyContract(string,address)": FunctionFragment;
    "getContract(string)": FunctionFragment;
    "getImplementation(string)": FunctionFragment;
    "getMarketplaceContract()": FunctionFragment;
    "getProxyUpgrader()": FunctionFragment;
    "getRoleManagerContract()": FunctionFragment;
    "getTokenFactoryContract()": FunctionFragment;
    "getTokenRegistryContract()": FunctionFragment;
    "hasContract(string)": FunctionFragment;
    "injectDependencies(string)": FunctionFragment;
    "injectDependenciesWithData(string,bytes)": FunctionFragment;
    "justAddProxyContract(string,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeContract(string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeContract(string,address)": FunctionFragment;
    "upgradeContractAndCall(string,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MARKETPLACE_NAME"
      | "ROLE_MANAGER_NAME"
      | "TOKEN_FACTORY_NAME"
      | "TOKEN_REGISTRY_NAME"
      | "__OwnableContractsRegistry_init"
      | "addContract"
      | "addProxyContract"
      | "getContract"
      | "getImplementation"
      | "getMarketplaceContract"
      | "getProxyUpgrader"
      | "getRoleManagerContract"
      | "getTokenFactoryContract"
      | "getTokenRegistryContract"
      | "hasContract"
      | "injectDependencies"
      | "injectDependenciesWithData"
      | "justAddProxyContract"
      | "owner"
      | "removeContract"
      | "renounceOwnership"
      | "transferOwnership"
      | "upgradeContract"
      | "upgradeContractAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MARKETPLACE_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_MANAGER_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_FACTORY_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_REGISTRY_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__OwnableContractsRegistry_init",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addProxyContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketplaceContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyUpgrader",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleManagerContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenFactoryContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenRegistryContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "injectDependencies",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "injectDependenciesWithData",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "justAddProxyContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeContract",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeContractAndCall",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "MARKETPLACE_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_MANAGER_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_FACTORY_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_REGISTRY_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__OwnableContractsRegistry_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProxyContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketplaceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyUpgrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleManagerContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenFactoryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenRegistryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "injectDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "injectDependenciesWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "justAddProxyContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeContractAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AddedContract(string,address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemovedContract(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedContract"): EventFragment;
}

export interface AddedContractEventObject {
  name: string;
  contractAddress: string;
  isProxy: boolean;
}
export type AddedContractEvent = TypedEvent<
  [string, string, boolean],
  AddedContractEventObject
>;

export type AddedContractEventFilter = TypedEventFilter<AddedContractEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemovedContractEventObject {
  name: string;
}
export type RemovedContractEvent = TypedEvent<
  [string],
  RemovedContractEventObject
>;

export type RemovedContractEventFilter = TypedEventFilter<RemovedContractEvent>;

export interface ContractRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ContractRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MARKETPLACE_NAME(overrides?: CallOverrides): Promise<[string]>;

    ROLE_MANAGER_NAME(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_FACTORY_NAME(overrides?: CallOverrides): Promise<[string]>;

    TOKEN_REGISTRY_NAME(overrides?: CallOverrides): Promise<[string]>;

    __OwnableContractsRegistry_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addContract(
      name_: PromiseOrValue<string>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addProxyContract(
      name_: PromiseOrValue<string>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getContract(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getImplementation(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarketplaceContract(overrides?: CallOverrides): Promise<[string]>;

    getProxyUpgrader(overrides?: CallOverrides): Promise<[string]>;

    getRoleManagerContract(overrides?: CallOverrides): Promise<[string]>;

    getTokenFactoryContract(overrides?: CallOverrides): Promise<[string]>;

    getTokenRegistryContract(overrides?: CallOverrides): Promise<[string]>;

    hasContract(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    injectDependencies(
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    injectDependenciesWithData(
      name_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    justAddProxyContract(
      name_: PromiseOrValue<string>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeContract(
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeContract(
      name_: PromiseOrValue<string>,
      newImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeContractAndCall(
      name_: PromiseOrValue<string>,
      newImplementation_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MARKETPLACE_NAME(overrides?: CallOverrides): Promise<string>;

  ROLE_MANAGER_NAME(overrides?: CallOverrides): Promise<string>;

  TOKEN_FACTORY_NAME(overrides?: CallOverrides): Promise<string>;

  TOKEN_REGISTRY_NAME(overrides?: CallOverrides): Promise<string>;

  __OwnableContractsRegistry_init(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addContract(
    name_: PromiseOrValue<string>,
    contractAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addProxyContract(
    name_: PromiseOrValue<string>,
    contractAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getContract(
    name_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getImplementation(
    name_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketplaceContract(overrides?: CallOverrides): Promise<string>;

  getProxyUpgrader(overrides?: CallOverrides): Promise<string>;

  getRoleManagerContract(overrides?: CallOverrides): Promise<string>;

  getTokenFactoryContract(overrides?: CallOverrides): Promise<string>;

  getTokenRegistryContract(overrides?: CallOverrides): Promise<string>;

  hasContract(
    name_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  injectDependencies(
    name_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  injectDependenciesWithData(
    name_: PromiseOrValue<string>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  justAddProxyContract(
    name_: PromiseOrValue<string>,
    contractAddress_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeContract(
    name_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeContract(
    name_: PromiseOrValue<string>,
    newImplementation_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeContractAndCall(
    name_: PromiseOrValue<string>,
    newImplementation_: PromiseOrValue<string>,
    data_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MARKETPLACE_NAME(overrides?: CallOverrides): Promise<string>;

    ROLE_MANAGER_NAME(overrides?: CallOverrides): Promise<string>;

    TOKEN_FACTORY_NAME(overrides?: CallOverrides): Promise<string>;

    TOKEN_REGISTRY_NAME(overrides?: CallOverrides): Promise<string>;

    __OwnableContractsRegistry_init(overrides?: CallOverrides): Promise<void>;

    addContract(
      name_: PromiseOrValue<string>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addProxyContract(
      name_: PromiseOrValue<string>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getContract(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getImplementation(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketplaceContract(overrides?: CallOverrides): Promise<string>;

    getProxyUpgrader(overrides?: CallOverrides): Promise<string>;

    getRoleManagerContract(overrides?: CallOverrides): Promise<string>;

    getTokenFactoryContract(overrides?: CallOverrides): Promise<string>;

    getTokenRegistryContract(overrides?: CallOverrides): Promise<string>;

    hasContract(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    injectDependencies(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    injectDependenciesWithData(
      name_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    justAddProxyContract(
      name_: PromiseOrValue<string>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeContract(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeContract(
      name_: PromiseOrValue<string>,
      newImplementation_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeContractAndCall(
      name_: PromiseOrValue<string>,
      newImplementation_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedContract(string,address,bool)"(
      name?: null,
      contractAddress?: null,
      isProxy?: null
    ): AddedContractEventFilter;
    AddedContract(
      name?: null,
      contractAddress?: null,
      isProxy?: null
    ): AddedContractEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RemovedContract(string)"(name?: null): RemovedContractEventFilter;
    RemovedContract(name?: null): RemovedContractEventFilter;
  };

  estimateGas: {
    MARKETPLACE_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    ROLE_MANAGER_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_FACTORY_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_REGISTRY_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    __OwnableContractsRegistry_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addContract(
      name_: PromiseOrValue<string>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addProxyContract(
      name_: PromiseOrValue<string>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getContract(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImplementation(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketplaceContract(overrides?: CallOverrides): Promise<BigNumber>;

    getProxyUpgrader(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleManagerContract(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenFactoryContract(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenRegistryContract(overrides?: CallOverrides): Promise<BigNumber>;

    hasContract(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    injectDependencies(
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    injectDependenciesWithData(
      name_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    justAddProxyContract(
      name_: PromiseOrValue<string>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeContract(
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeContract(
      name_: PromiseOrValue<string>,
      newImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeContractAndCall(
      name_: PromiseOrValue<string>,
      newImplementation_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MARKETPLACE_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROLE_MANAGER_NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOKEN_FACTORY_NAME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOKEN_REGISTRY_NAME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __OwnableContractsRegistry_init(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addContract(
      name_: PromiseOrValue<string>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addProxyContract(
      name_: PromiseOrValue<string>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getContract(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImplementation(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketplaceContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxyUpgrader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleManagerContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenFactoryContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenRegistryContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasContract(
      name_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    injectDependencies(
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    injectDependenciesWithData(
      name_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    justAddProxyContract(
      name_: PromiseOrValue<string>,
      contractAddress_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeContract(
      name_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeContract(
      name_: PromiseOrValue<string>,
      newImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeContractAndCall(
      name_: PromiseOrValue<string>,
      newImplementation_: PromiseOrValue<string>,
      data_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
