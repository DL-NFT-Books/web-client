/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ITokenContract {
  export type MintedTokenInfoStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    mintedTokenPrice: PromiseOrValue<BigNumberish>;
    tokenURI: PromiseOrValue<string>;
  };

  export type MintedTokenInfoStructOutput = [BigNumber, BigNumber, string] & {
    tokenId: BigNumber;
    mintedTokenPrice: BigNumber;
    tokenURI: string;
  };

  export type TokenContractInitParamsStruct = {
    tokenName: PromiseOrValue<string>;
    tokenSymbol: PromiseOrValue<string>;
    tokenFactoryAddr: PromiseOrValue<string>;
    pricePerOneToken: PromiseOrValue<BigNumberish>;
    voucherTokenContract: PromiseOrValue<string>;
    voucherTokensAmount: PromiseOrValue<BigNumberish>;
    minNFTFloorPrice: PromiseOrValue<BigNumberish>;
  };

  export type TokenContractInitParamsStructOutput = [
    string,
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    tokenName: string;
    tokenSymbol: string;
    tokenFactoryAddr: string;
    pricePerOneToken: BigNumber;
    voucherTokenContract: string;
    voucherTokensAmount: BigNumber;
    minNFTFloorPrice: BigNumber;
  };
}

export interface NftBookTokenInterface extends utils.Interface {
  functions: {
    "__TokenContract_init((string,string,address,uint256,address,uint256,uint256))": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "existingTokenURIs(string)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getUserTokenIDs(address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "minNFTFloorPrice()": FunctionFragment;
    "mintToken(address,uint256,uint256,uint256,string,bytes32,bytes32,uint8)": FunctionFragment;
    "mintTokenByNFT(address,uint256,uint256,uint256,string,bytes32,bytes32,uint8)": FunctionFragment;
    "name()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pricePerOneToken()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenFactory()": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateAllParams(uint256,uint256,address,uint256,string,string)": FunctionFragment;
    "updateTokenContractParams(uint256,uint256,string,string)": FunctionFragment;
    "updateVoucherParams(address,uint256)": FunctionFragment;
    "voucherTokenContract()": FunctionFragment;
    "voucherTokensAmount()": FunctionFragment;
    "withdrawPaidTokens(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__TokenContract_init"
      | "approve"
      | "balanceOf"
      | "existingTokenURIs"
      | "getApproved"
      | "getUserTokenIDs"
      | "isApprovedForAll"
      | "minNFTFloorPrice"
      | "mintToken"
      | "mintTokenByNFT"
      | "name"
      | "onERC721Received"
      | "owner"
      | "ownerOf"
      | "pause"
      | "paused"
      | "pricePerOneToken"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenFactory"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "unpause"
      | "updateAllParams"
      | "updateTokenContractParams"
      | "updateVoucherParams"
      | "voucherTokenContract"
      | "voucherTokensAmount"
      | "withdrawPaidTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__TokenContract_init",
    values: [ITokenContract.TokenContractInitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "existingTokenURIs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenIDs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minNFTFloorPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTokenByNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricePerOneToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAllParams",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenContractParams",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVoucherParams",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "voucherTokenContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voucherTokensAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPaidTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "__TokenContract_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "existingTokenURIs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minNFTFloorPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintTokenByNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricePerOneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAllParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenContractParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVoucherParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voucherTokenContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voucherTokensAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPaidTokens",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "PaidTokensWithdrawn(address,address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "SuccessfullyMinted(address,tuple,address,uint256,uint256,uint256)": EventFragment;
    "SuccessfullyMintedByNFT(address,tuple,address,uint256,uint256)": EventFragment;
    "TokenContractParamsUpdated(uint256,uint256,string,string)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "VoucherParamsUpdated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaidTokensWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuccessfullyMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SuccessfullyMintedByNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenContractParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoucherParamsUpdated"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface PaidTokensWithdrawnEventObject {
  tokenAddr: string;
  recipient: string;
  amount: BigNumber;
}
export type PaidTokensWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  PaidTokensWithdrawnEventObject
>;

export type PaidTokensWithdrawnEventFilter =
  TypedEventFilter<PaidTokensWithdrawnEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface SuccessfullyMintedEventObject {
  recipient: string;
  mintedTokenInfo: ITokenContract.MintedTokenInfoStructOutput;
  paymentTokenAddress: string;
  paidTokensAmount: BigNumber;
  paymentTokenPrice: BigNumber;
  discount: BigNumber;
}
export type SuccessfullyMintedEvent = TypedEvent<
  [
    string,
    ITokenContract.MintedTokenInfoStructOutput,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  SuccessfullyMintedEventObject
>;

export type SuccessfullyMintedEventFilter =
  TypedEventFilter<SuccessfullyMintedEvent>;

export interface SuccessfullyMintedByNFTEventObject {
  recipient: string;
  mintedTokenInfo: ITokenContract.MintedTokenInfoStructOutput;
  nftAddress: string;
  tokenId: BigNumber;
  nftFloorPrice: BigNumber;
}
export type SuccessfullyMintedByNFTEvent = TypedEvent<
  [
    string,
    ITokenContract.MintedTokenInfoStructOutput,
    string,
    BigNumber,
    BigNumber
  ],
  SuccessfullyMintedByNFTEventObject
>;

export type SuccessfullyMintedByNFTEventFilter =
  TypedEventFilter<SuccessfullyMintedByNFTEvent>;

export interface TokenContractParamsUpdatedEventObject {
  newPrice: BigNumber;
  newMinNFTFloorPrice: BigNumber;
  tokenName: string;
  tokenSymbol: string;
}
export type TokenContractParamsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  TokenContractParamsUpdatedEventObject
>;

export type TokenContractParamsUpdatedEventFilter =
  TypedEventFilter<TokenContractParamsUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface VoucherParamsUpdatedEventObject {
  newVoucherTokenContract: string;
  newVoucherTokensAmount: BigNumber;
}
export type VoucherParamsUpdatedEvent = TypedEvent<
  [string, BigNumber],
  VoucherParamsUpdatedEventObject
>;

export type VoucherParamsUpdatedEventFilter =
  TypedEventFilter<VoucherParamsUpdatedEvent>;

export interface NftBookToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NftBookTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __TokenContract_init(
      initParams_: ITokenContract.TokenContractInitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    existingTokenURIs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserTokenIDs(
      userAddr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { tokenIDs_: BigNumber[] }>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minNFTFloorPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintToken(
      paymentTokenAddress_: PromiseOrValue<string>,
      paymentTokenPrice_: PromiseOrValue<BigNumberish>,
      discount_: PromiseOrValue<BigNumberish>,
      endTimestamp_: PromiseOrValue<BigNumberish>,
      tokenURI_: PromiseOrValue<string>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintTokenByNFT(
      nftAddress_: PromiseOrValue<string>,
      nftFloorPrice_: PromiseOrValue<BigNumberish>,
      tokenId_: PromiseOrValue<BigNumberish>,
      endTimestamp_: PromiseOrValue<BigNumberish>,
      tokenURI_: PromiseOrValue<string>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pricePerOneToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenFactory(overrides?: CallOverrides): Promise<[string]>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAllParams(
      newPrice_: PromiseOrValue<BigNumberish>,
      newMinNFTFloorPrice_: PromiseOrValue<BigNumberish>,
      newVoucherTokenContract_: PromiseOrValue<string>,
      newVoucherTokensAmount_: PromiseOrValue<BigNumberish>,
      newTokenName_: PromiseOrValue<string>,
      newTokenSymbol_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTokenContractParams(
      newPrice_: PromiseOrValue<BigNumberish>,
      newMinNFTFloorPrice_: PromiseOrValue<BigNumberish>,
      newTokenName_: PromiseOrValue<string>,
      newTokenSymbol_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateVoucherParams(
      newVoucherTokenContract_: PromiseOrValue<string>,
      newVoucherTokensAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voucherTokenContract(overrides?: CallOverrides): Promise<[string]>;

    voucherTokensAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawPaidTokens(
      tokenAddr_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  __TokenContract_init(
    initParams_: ITokenContract.TokenContractInitParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  existingTokenURIs(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserTokenIDs(
    userAddr_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minNFTFloorPrice(overrides?: CallOverrides): Promise<BigNumber>;

  mintToken(
    paymentTokenAddress_: PromiseOrValue<string>,
    paymentTokenPrice_: PromiseOrValue<BigNumberish>,
    discount_: PromiseOrValue<BigNumberish>,
    endTimestamp_: PromiseOrValue<BigNumberish>,
    tokenURI_: PromiseOrValue<string>,
    r_: PromiseOrValue<BytesLike>,
    s_: PromiseOrValue<BytesLike>,
    v_: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintTokenByNFT(
    nftAddress_: PromiseOrValue<string>,
    nftFloorPrice_: PromiseOrValue<BigNumberish>,
    tokenId_: PromiseOrValue<BigNumberish>,
    endTimestamp_: PromiseOrValue<BigNumberish>,
    tokenURI_: PromiseOrValue<string>,
    r_: PromiseOrValue<BytesLike>,
    s_: PromiseOrValue<BytesLike>,
    v_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pricePerOneToken(overrides?: CallOverrides): Promise<BigNumber>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenFactory(overrides?: CallOverrides): Promise<string>;

  tokenOfOwnerByIndex(
    owner: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(
    tokenId_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAllParams(
    newPrice_: PromiseOrValue<BigNumberish>,
    newMinNFTFloorPrice_: PromiseOrValue<BigNumberish>,
    newVoucherTokenContract_: PromiseOrValue<string>,
    newVoucherTokensAmount_: PromiseOrValue<BigNumberish>,
    newTokenName_: PromiseOrValue<string>,
    newTokenSymbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTokenContractParams(
    newPrice_: PromiseOrValue<BigNumberish>,
    newMinNFTFloorPrice_: PromiseOrValue<BigNumberish>,
    newTokenName_: PromiseOrValue<string>,
    newTokenSymbol_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateVoucherParams(
    newVoucherTokenContract_: PromiseOrValue<string>,
    newVoucherTokensAmount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voucherTokenContract(overrides?: CallOverrides): Promise<string>;

  voucherTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawPaidTokens(
    tokenAddr_: PromiseOrValue<string>,
    recipient_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __TokenContract_init(
      initParams_: ITokenContract.TokenContractInitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    existingTokenURIs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserTokenIDs(
      userAddr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minNFTFloorPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mintToken(
      paymentTokenAddress_: PromiseOrValue<string>,
      paymentTokenPrice_: PromiseOrValue<BigNumberish>,
      discount_: PromiseOrValue<BigNumberish>,
      endTimestamp_: PromiseOrValue<BigNumberish>,
      tokenURI_: PromiseOrValue<string>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintTokenByNFT(
      nftAddress_: PromiseOrValue<string>,
      nftFloorPrice_: PromiseOrValue<BigNumberish>,
      tokenId_: PromiseOrValue<BigNumberish>,
      endTimestamp_: PromiseOrValue<BigNumberish>,
      tokenURI_: PromiseOrValue<string>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pricePerOneToken(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenFactory(overrides?: CallOverrides): Promise<string>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateAllParams(
      newPrice_: PromiseOrValue<BigNumberish>,
      newMinNFTFloorPrice_: PromiseOrValue<BigNumberish>,
      newVoucherTokenContract_: PromiseOrValue<string>,
      newVoucherTokensAmount_: PromiseOrValue<BigNumberish>,
      newTokenName_: PromiseOrValue<string>,
      newTokenSymbol_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenContractParams(
      newPrice_: PromiseOrValue<BigNumberish>,
      newMinNFTFloorPrice_: PromiseOrValue<BigNumberish>,
      newTokenName_: PromiseOrValue<string>,
      newTokenSymbol_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVoucherParams(
      newVoucherTokenContract_: PromiseOrValue<string>,
      newVoucherTokensAmount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    voucherTokenContract(overrides?: CallOverrides): Promise<string>;

    voucherTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawPaidTokens(
      tokenAddr_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "PaidTokensWithdrawn(address,address,uint256)"(
      tokenAddr?: PromiseOrValue<string> | null,
      recipient?: null,
      amount?: null
    ): PaidTokensWithdrawnEventFilter;
    PaidTokensWithdrawn(
      tokenAddr?: PromiseOrValue<string> | null,
      recipient?: null,
      amount?: null
    ): PaidTokensWithdrawnEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "SuccessfullyMinted(address,tuple,address,uint256,uint256,uint256)"(
      recipient?: PromiseOrValue<string> | null,
      mintedTokenInfo?: null,
      paymentTokenAddress?: PromiseOrValue<string> | null,
      paidTokensAmount?: null,
      paymentTokenPrice?: null,
      discount?: null
    ): SuccessfullyMintedEventFilter;
    SuccessfullyMinted(
      recipient?: PromiseOrValue<string> | null,
      mintedTokenInfo?: null,
      paymentTokenAddress?: PromiseOrValue<string> | null,
      paidTokensAmount?: null,
      paymentTokenPrice?: null,
      discount?: null
    ): SuccessfullyMintedEventFilter;

    "SuccessfullyMintedByNFT(address,tuple,address,uint256,uint256)"(
      recipient?: PromiseOrValue<string> | null,
      mintedTokenInfo?: null,
      nftAddress?: PromiseOrValue<string> | null,
      tokenId?: null,
      nftFloorPrice?: null
    ): SuccessfullyMintedByNFTEventFilter;
    SuccessfullyMintedByNFT(
      recipient?: PromiseOrValue<string> | null,
      mintedTokenInfo?: null,
      nftAddress?: PromiseOrValue<string> | null,
      tokenId?: null,
      nftFloorPrice?: null
    ): SuccessfullyMintedByNFTEventFilter;

    "TokenContractParamsUpdated(uint256,uint256,string,string)"(
      newPrice?: null,
      newMinNFTFloorPrice?: null,
      tokenName?: null,
      tokenSymbol?: null
    ): TokenContractParamsUpdatedEventFilter;
    TokenContractParamsUpdated(
      newPrice?: null,
      newMinNFTFloorPrice?: null,
      tokenName?: null,
      tokenSymbol?: null
    ): TokenContractParamsUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "VoucherParamsUpdated(address,uint256)"(
      newVoucherTokenContract?: null,
      newVoucherTokensAmount?: null
    ): VoucherParamsUpdatedEventFilter;
    VoucherParamsUpdated(
      newVoucherTokenContract?: null,
      newVoucherTokensAmount?: null
    ): VoucherParamsUpdatedEventFilter;
  };

  estimateGas: {
    __TokenContract_init(
      initParams_: ITokenContract.TokenContractInitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    existingTokenURIs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTokenIDs(
      userAddr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minNFTFloorPrice(overrides?: CallOverrides): Promise<BigNumber>;

    mintToken(
      paymentTokenAddress_: PromiseOrValue<string>,
      paymentTokenPrice_: PromiseOrValue<BigNumberish>,
      discount_: PromiseOrValue<BigNumberish>,
      endTimestamp_: PromiseOrValue<BigNumberish>,
      tokenURI_: PromiseOrValue<string>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintTokenByNFT(
      nftAddress_: PromiseOrValue<string>,
      nftFloorPrice_: PromiseOrValue<BigNumberish>,
      tokenId_: PromiseOrValue<BigNumberish>,
      endTimestamp_: PromiseOrValue<BigNumberish>,
      tokenURI_: PromiseOrValue<string>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerOneToken(overrides?: CallOverrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAllParams(
      newPrice_: PromiseOrValue<BigNumberish>,
      newMinNFTFloorPrice_: PromiseOrValue<BigNumberish>,
      newVoucherTokenContract_: PromiseOrValue<string>,
      newVoucherTokensAmount_: PromiseOrValue<BigNumberish>,
      newTokenName_: PromiseOrValue<string>,
      newTokenSymbol_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTokenContractParams(
      newPrice_: PromiseOrValue<BigNumberish>,
      newMinNFTFloorPrice_: PromiseOrValue<BigNumberish>,
      newTokenName_: PromiseOrValue<string>,
      newTokenSymbol_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateVoucherParams(
      newVoucherTokenContract_: PromiseOrValue<string>,
      newVoucherTokensAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voucherTokenContract(overrides?: CallOverrides): Promise<BigNumber>;

    voucherTokensAmount(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawPaidTokens(
      tokenAddr_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __TokenContract_init(
      initParams_: ITokenContract.TokenContractInitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    existingTokenURIs(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTokenIDs(
      userAddr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minNFTFloorPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintToken(
      paymentTokenAddress_: PromiseOrValue<string>,
      paymentTokenPrice_: PromiseOrValue<BigNumberish>,
      discount_: PromiseOrValue<BigNumberish>,
      endTimestamp_: PromiseOrValue<BigNumberish>,
      tokenURI_: PromiseOrValue<string>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintTokenByNFT(
      nftAddress_: PromiseOrValue<string>,
      nftFloorPrice_: PromiseOrValue<BigNumberish>,
      tokenId_: PromiseOrValue<BigNumberish>,
      endTimestamp_: PromiseOrValue<BigNumberish>,
      tokenURI_: PromiseOrValue<string>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePerOneToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAllParams(
      newPrice_: PromiseOrValue<BigNumberish>,
      newMinNFTFloorPrice_: PromiseOrValue<BigNumberish>,
      newVoucherTokenContract_: PromiseOrValue<string>,
      newVoucherTokensAmount_: PromiseOrValue<BigNumberish>,
      newTokenName_: PromiseOrValue<string>,
      newTokenSymbol_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenContractParams(
      newPrice_: PromiseOrValue<BigNumberish>,
      newMinNFTFloorPrice_: PromiseOrValue<BigNumberish>,
      newTokenName_: PromiseOrValue<string>,
      newTokenSymbol_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateVoucherParams(
      newVoucherTokenContract_: PromiseOrValue<string>,
      newVoucherTokensAmount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voucherTokenContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voucherTokensAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawPaidTokens(
      tokenAddr_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
