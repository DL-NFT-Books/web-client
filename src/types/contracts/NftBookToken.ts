/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface NftBookTokenInterface extends utils.Interface {
  functions: {
    "__TokenContract_init(string,string,address,uint256)": FunctionFragment;
    "existingTokenURIs(string)": FunctionFragment;
    "getUserTokenIDs(address)": FunctionFragment;
    "mintToken(address,uint256,uint256,string,bytes32,bytes32,uint8)": FunctionFragment;
    "pause()": FunctionFragment;
    "pricePerOneToken()": FunctionFragment;
    "tokenFactory()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updatePricePerOneToken(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__TokenContract_init"
      | "existingTokenURIs"
      | "getUserTokenIDs"
      | "mintToken"
      | "pause"
      | "pricePerOneToken"
      | "tokenFactory"
      | "unpause"
      | "updatePricePerOneToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__TokenContract_init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "existingTokenURIs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenIDs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricePerOneToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePricePerOneToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "__TokenContract_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "existingTokenURIs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricePerOneToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePricePerOneToken",
    data: BytesLike
  ): Result;

  events: {
    "PaymentSuccessful(address,uint256,uint256)": EventFragment;
    "TokenMinted(address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PaymentSuccessful"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMinted"): EventFragment;
}

export interface PaymentSuccessfulEventObject {
  tokenAddress: string;
  tokenAmount: BigNumber;
  tokenPrice: BigNumber;
}
export type PaymentSuccessfulEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PaymentSuccessfulEventObject
>;

export type PaymentSuccessfulEventFilter =
  TypedEventFilter<PaymentSuccessfulEvent>;

export interface TokenMintedEventObject {
  recipient: string;
  tokenId: BigNumber;
  tokenURI: string;
}
export type TokenMintedEvent = TypedEvent<
  [string, BigNumber, string],
  TokenMintedEventObject
>;

export type TokenMintedEventFilter = TypedEventFilter<TokenMintedEvent>;

export interface NftBookToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NftBookTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __TokenContract_init(
      tokenName_: PromiseOrValue<string>,
      tokenSymbol_: PromiseOrValue<string>,
      tokenFactoryAddr_: PromiseOrValue<string>,
      pricePerOneToken_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    existingTokenURIs(
      tokenURI_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getUserTokenIDs(
      userAddr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { tokenIDs_: BigNumber[] }>;

    mintToken(
      paymentTokenAddress_: PromiseOrValue<string>,
      paymentTokenPrice_: PromiseOrValue<BigNumberish>,
      endTimestamp_: PromiseOrValue<BigNumberish>,
      tokenURI_: PromiseOrValue<string>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pricePerOneToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenFactory(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePricePerOneToken(
      newPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  __TokenContract_init(
    tokenName_: PromiseOrValue<string>,
    tokenSymbol_: PromiseOrValue<string>,
    tokenFactoryAddr_: PromiseOrValue<string>,
    pricePerOneToken_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  existingTokenURIs(
    tokenURI_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getUserTokenIDs(
    userAddr_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  mintToken(
    paymentTokenAddress_: PromiseOrValue<string>,
    paymentTokenPrice_: PromiseOrValue<BigNumberish>,
    endTimestamp_: PromiseOrValue<BigNumberish>,
    tokenURI_: PromiseOrValue<string>,
    r_: PromiseOrValue<BytesLike>,
    s_: PromiseOrValue<BytesLike>,
    v_: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pricePerOneToken(overrides?: CallOverrides): Promise<BigNumber>;

  tokenFactory(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePricePerOneToken(
    newPrice_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __TokenContract_init(
      tokenName_: PromiseOrValue<string>,
      tokenSymbol_: PromiseOrValue<string>,
      tokenFactoryAddr_: PromiseOrValue<string>,
      pricePerOneToken_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    existingTokenURIs(
      tokenURI_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getUserTokenIDs(
      userAddr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    mintToken(
      paymentTokenAddress_: PromiseOrValue<string>,
      paymentTokenPrice_: PromiseOrValue<BigNumberish>,
      endTimestamp_: PromiseOrValue<BigNumberish>,
      tokenURI_: PromiseOrValue<string>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    pricePerOneToken(overrides?: CallOverrides): Promise<BigNumber>;

    tokenFactory(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updatePricePerOneToken(
      newPrice_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PaymentSuccessful(address,uint256,uint256)"(
      tokenAddress?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      tokenPrice?: null
    ): PaymentSuccessfulEventFilter;
    PaymentSuccessful(
      tokenAddress?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      tokenPrice?: null
    ): PaymentSuccessfulEventFilter;

    "TokenMinted(address,uint256,string)"(
      recipient?: PromiseOrValue<string> | null,
      tokenId?: null,
      tokenURI?: null
    ): TokenMintedEventFilter;
    TokenMinted(
      recipient?: PromiseOrValue<string> | null,
      tokenId?: null,
      tokenURI?: null
    ): TokenMintedEventFilter;
  };

  estimateGas: {
    __TokenContract_init(
      tokenName_: PromiseOrValue<string>,
      tokenSymbol_: PromiseOrValue<string>,
      tokenFactoryAddr_: PromiseOrValue<string>,
      pricePerOneToken_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    existingTokenURIs(
      tokenURI_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTokenIDs(
      userAddr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintToken(
      paymentTokenAddress_: PromiseOrValue<string>,
      paymentTokenPrice_: PromiseOrValue<BigNumberish>,
      endTimestamp_: PromiseOrValue<BigNumberish>,
      tokenURI_: PromiseOrValue<string>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pricePerOneToken(overrides?: CallOverrides): Promise<BigNumber>;

    tokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePricePerOneToken(
      newPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __TokenContract_init(
      tokenName_: PromiseOrValue<string>,
      tokenSymbol_: PromiseOrValue<string>,
      tokenFactoryAddr_: PromiseOrValue<string>,
      pricePerOneToken_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    existingTokenURIs(
      tokenURI_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTokenIDs(
      userAddr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintToken(
      paymentTokenAddress_: PromiseOrValue<string>,
      paymentTokenPrice_: PromiseOrValue<BigNumberish>,
      endTimestamp_: PromiseOrValue<BigNumberish>,
      tokenURI_: PromiseOrValue<string>,
      r_: PromiseOrValue<BytesLike>,
      s_: PromiseOrValue<BytesLike>,
      v_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pricePerOneToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePricePerOneToken(
      newPrice_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
