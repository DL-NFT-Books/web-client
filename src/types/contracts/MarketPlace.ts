/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IMarketplace {
  export type TokenParamsStruct = {
    pricePerOneToken: PromiseOrValue<BigNumberish>;
    minNFTFloorPrice: PromiseOrValue<BigNumberish>;
    voucherTokensAmount: PromiseOrValue<BigNumberish>;
    voucherTokenContract: PromiseOrValue<string>;
    fundsRecipient: PromiseOrValue<string>;
    isNFTBuyable: PromiseOrValue<boolean>;
    isDisabled: PromiseOrValue<boolean>;
    isVoucherBuyable: PromiseOrValue<boolean>;
  };

  export type TokenParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean,
    boolean,
    boolean
  ] & {
    pricePerOneToken: BigNumber;
    minNFTFloorPrice: BigNumber;
    voucherTokensAmount: BigNumber;
    voucherTokenContract: string;
    fundsRecipient: string;
    isNFTBuyable: boolean;
    isDisabled: boolean;
    isVoucherBuyable: boolean;
  };

  export type AcceptRequestParamsStruct = {
    requestId: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    tokenData: IERC721MintableToken.TokenMintDataStruct;
  };

  export type AcceptRequestParamsStructOutput = [
    BigNumber,
    string,
    IERC721MintableToken.TokenMintDataStructOutput
  ] & {
    requestId: BigNumber;
    recipient: string;
    tokenData: IERC721MintableToken.TokenMintDataStructOutput;
  };

  export type NFTRequestInfoStruct = {
    requester: PromiseOrValue<string>;
    tokenContract: PromiseOrValue<string>;
    nftContract: PromiseOrValue<string>;
    nftId: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type NFTRequestInfoStructOutput = [
    string,
    string,
    string,
    BigNumber,
    number
  ] & {
    requester: string;
    tokenContract: string;
    nftContract: string;
    nftId: BigNumber;
    status: number;
  };

  export type PaymentDetailsStruct = {
    paymentTokenAddress: PromiseOrValue<string>;
    paymentTokenPrice: PromiseOrValue<BigNumberish>;
    discount: PromiseOrValue<BigNumberish>;
    nftTokenId: PromiseOrValue<BigNumberish>;
  };

  export type PaymentDetailsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    paymentTokenAddress: string;
    paymentTokenPrice: BigNumber;
    discount: BigNumber;
    nftTokenId: BigNumber;
  };

  export type BuyParamsStruct = {
    tokenContract: PromiseOrValue<string>;
    recipient: PromiseOrValue<string>;
    paymentDetails: IMarketplace.PaymentDetailsStruct;
    tokenData: IERC721MintableToken.TokenMintDataStruct;
  };

  export type BuyParamsStructOutput = [
    string,
    string,
    IMarketplace.PaymentDetailsStructOutput,
    IERC721MintableToken.TokenMintDataStructOutput
  ] & {
    tokenContract: string;
    recipient: string;
    paymentDetails: IMarketplace.PaymentDetailsStructOutput;
    tokenData: IERC721MintableToken.TokenMintDataStructOutput;
  };

  export type SigDataStruct = {
    endSigTimestamp: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
    v: PromiseOrValue<BigNumberish>;
  };

  export type SigDataStructOutput = [BigNumber, string, string, number] & {
    endSigTimestamp: BigNumber;
    r: string;
    s: string;
    v: number;
  };

  export type BaseTokenDataStruct = {
    tokenContract: PromiseOrValue<string>;
    tokenName: PromiseOrValue<string>;
    tokenSymbol: PromiseOrValue<string>;
  };

  export type BaseTokenDataStructOutput = [string, string, string] & {
    tokenContract: string;
    tokenName: string;
    tokenSymbol: string;
  };

  export type BriefTokenInfoStruct = {
    baseTokenData: IMarketplace.BaseTokenDataStruct;
    pricePerOneToken: PromiseOrValue<BigNumberish>;
    isDisabled: PromiseOrValue<boolean>;
  };

  export type BriefTokenInfoStructOutput = [
    IMarketplace.BaseTokenDataStructOutput,
    BigNumber,
    boolean
  ] & {
    baseTokenData: IMarketplace.BaseTokenDataStructOutput;
    pricePerOneToken: BigNumber;
    isDisabled: boolean;
  };

  export type DetailedTokenInfoStruct = {
    baseTokenData: IMarketplace.BaseTokenDataStruct;
    tokenParams: IMarketplace.TokenParamsStruct;
  };

  export type DetailedTokenInfoStructOutput = [
    IMarketplace.BaseTokenDataStructOutput,
    IMarketplace.TokenParamsStructOutput
  ] & {
    baseTokenData: IMarketplace.BaseTokenDataStructOutput;
    tokenParams: IMarketplace.TokenParamsStructOutput;
  };

  export type UserTokensStruct = {
    tokenContract: PromiseOrValue<string>;
    tokenIds: PromiseOrValue<BigNumberish>[];
  };

  export type UserTokensStructOutput = [string, BigNumber[]] & {
    tokenContract: string;
    tokenIds: BigNumber[];
  };
}

export declare namespace IERC721MintableToken {
  export type TokenMintDataStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    tokenURI: PromiseOrValue<string>;
  };

  export type TokenMintDataStructOutput = [BigNumber, string] & {
    tokenId: BigNumber;
    tokenURI: string;
  };
}

export interface MarketPlaceInterface extends utils.Interface {
  functions: {
    "__Marketplace_init(string)": FunctionFragment;
    "acceptRequest((uint256,address,(uint256,string)),(uint256,bytes32,bytes32,uint8))": FunctionFragment;
    "addToken(string,string,(uint256,uint256,uint256,address,address,bool,bool,bool))": FunctionFragment;
    "baseTokenContractsURI()": FunctionFragment;
    "buyTokenWithERC20((address,address,(address,uint256,uint256,uint256),(uint256,string)),(uint256,bytes32,bytes32,uint8))": FunctionFragment;
    "buyTokenWithETH((address,address,(address,uint256,uint256,uint256),(uint256,string)),(uint256,bytes32,bytes32,uint8))": FunctionFragment;
    "buyTokenWithNFT((address,address,(address,uint256,uint256,uint256),(uint256,string)),(uint256,bytes32,bytes32,uint8))": FunctionFragment;
    "buyTokenWithVoucher((address,address,(address,uint256,uint256,uint256),(uint256,string)),(uint256,bytes32,bytes32,uint8),(uint256,bytes32,bytes32,uint8))": FunctionFragment;
    "cancelNFTRequest(uint256)": FunctionFragment;
    "createNFTRequest(address,address,uint256)": FunctionFragment;
    "getActiveTokenContractsCount()": FunctionFragment;
    "getAllPendingRequestsCount()": FunctionFragment;
    "getBriefTokenInfo(address[])": FunctionFragment;
    "getBriefTokenInfoPart(uint256,uint256)": FunctionFragment;
    "getDetailedTokenInfo(address[])": FunctionFragment;
    "getDetailedTokenInfoPart(uint256,uint256)": FunctionFragment;
    "getInjector()": FunctionFragment;
    "getNFTRequestsInfo(uint256[])": FunctionFragment;
    "getPendingRequestsPart(uint256,uint256)": FunctionFragment;
    "getTokenContractsCount()": FunctionFragment;
    "getTokenContractsPart(uint256,uint256)": FunctionFragment;
    "getUserPendingRequestsCount(address)": FunctionFragment;
    "getUserPendingRequestsPart(address,uint256,uint256)": FunctionFragment;
    "getUserTokensPart(address,uint256,uint256)": FunctionFragment;
    "nextRequestId()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "setBaseTokenContractsURI(string)": FunctionFragment;
    "setDependencies(address,bytes)": FunctionFragment;
    "setInjector(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateTokenParams(address,(uint256,uint256,uint256,address,address,bool,bool,bool))": FunctionFragment;
    "withdrawCurrency(address,address,uint256,bool)": FunctionFragment;
    "withdrawNFTs(address,address,uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__Marketplace_init"
      | "acceptRequest"
      | "addToken"
      | "baseTokenContractsURI"
      | "buyTokenWithERC20"
      | "buyTokenWithETH"
      | "buyTokenWithNFT"
      | "buyTokenWithVoucher"
      | "cancelNFTRequest"
      | "createNFTRequest"
      | "getActiveTokenContractsCount"
      | "getAllPendingRequestsCount"
      | "getBriefTokenInfo"
      | "getBriefTokenInfoPart"
      | "getDetailedTokenInfo"
      | "getDetailedTokenInfoPart"
      | "getInjector"
      | "getNFTRequestsInfo"
      | "getPendingRequestsPart"
      | "getTokenContractsCount"
      | "getTokenContractsPart"
      | "getUserPendingRequestsCount"
      | "getUserPendingRequestsPart"
      | "getUserTokensPart"
      | "nextRequestId"
      | "onERC721Received"
      | "pause"
      | "paused"
      | "setBaseTokenContractsURI"
      | "setDependencies"
      | "setInjector"
      | "unpause"
      | "updateTokenParams"
      | "withdrawCurrency"
      | "withdrawNFTs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__Marketplace_init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptRequest",
    values: [IMarketplace.AcceptRequestParamsStruct, IMarketplace.SigDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      IMarketplace.TokenParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "baseTokenContractsURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenWithERC20",
    values: [IMarketplace.BuyParamsStruct, IMarketplace.SigDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenWithETH",
    values: [IMarketplace.BuyParamsStruct, IMarketplace.SigDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenWithNFT",
    values: [IMarketplace.BuyParamsStruct, IMarketplace.SigDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenWithVoucher",
    values: [
      IMarketplace.BuyParamsStruct,
      IMarketplace.SigDataStruct,
      IMarketplace.SigDataStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelNFTRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNFTRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveTokenContractsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPendingRequestsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBriefTokenInfo",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBriefTokenInfoPart",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDetailedTokenInfo",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDetailedTokenInfoPart",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInjector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTRequestsInfo",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRequestsPart",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenContractsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenContractsPart",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPendingRequestsCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPendingRequestsPart",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokensPart",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nextRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBaseTokenContractsURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDependencies",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInjector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateTokenParams",
    values: [PromiseOrValue<string>, IMarketplace.TokenParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCurrency",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNFTs",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "__Marketplace_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenContractsURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenWithERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenWithETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenWithNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenWithVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelNFTRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNFTRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveTokenContractsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPendingRequestsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBriefTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBriefTokenInfoPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDetailedTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDetailedTokenInfoPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInjector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTRequestsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRequestsPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenContractsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenContractsPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPendingRequestsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPendingRequestsPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokensPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBaseTokenContractsURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInjector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNFTs",
    data: BytesLike
  ): Result;

  events: {
    "BaseTokenContractsURIUpdated(string)": EventFragment;
    "NFTRequestCanceled(uint256)": EventFragment;
    "NFTRequestCreated(uint256,address,address,address,uint256)": EventFragment;
    "NFTTokensWithdrawn(address,address,uint256[])": EventFragment;
    "PaidTokensWithdrawn(address,address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "TokenContractDeployed(address,string,string,tuple)": EventFragment;
    "TokenParamsUpdated(address,tuple)": EventFragment;
    "TokenSuccessfullyExchanged(tuple,tuple)": EventFragment;
    "TokenSuccessfullyPurchased(uint256,uint256,tuple,uint8)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BaseTokenContractsURIUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTRequestCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTRequestCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTTokensWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaidTokensWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenContractDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSuccessfullyExchanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSuccessfullyPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface BaseTokenContractsURIUpdatedEventObject {
  newBaseTokenContractsURI: string;
}
export type BaseTokenContractsURIUpdatedEvent = TypedEvent<
  [string],
  BaseTokenContractsURIUpdatedEventObject
>;

export type BaseTokenContractsURIUpdatedEventFilter =
  TypedEventFilter<BaseTokenContractsURIUpdatedEvent>;

export interface NFTRequestCanceledEventObject {
  requestId: BigNumber;
}
export type NFTRequestCanceledEvent = TypedEvent<
  [BigNumber],
  NFTRequestCanceledEventObject
>;

export type NFTRequestCanceledEventFilter =
  TypedEventFilter<NFTRequestCanceledEvent>;

export interface NFTRequestCreatedEventObject {
  requestId: BigNumber;
  requester: string;
  tokenContract: string;
  nftContract: string;
  nftId: BigNumber;
}
export type NFTRequestCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber],
  NFTRequestCreatedEventObject
>;

export type NFTRequestCreatedEventFilter =
  TypedEventFilter<NFTRequestCreatedEvent>;

export interface NFTTokensWithdrawnEventObject {
  nftAddr: string;
  recipient: string;
  tokenIDs: BigNumber[];
}
export type NFTTokensWithdrawnEvent = TypedEvent<
  [string, string, BigNumber[]],
  NFTTokensWithdrawnEventObject
>;

export type NFTTokensWithdrawnEventFilter =
  TypedEventFilter<NFTTokensWithdrawnEvent>;

export interface PaidTokensWithdrawnEventObject {
  tokenAddr: string;
  recipient: string;
  amount: BigNumber;
}
export type PaidTokensWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  PaidTokensWithdrawnEventObject
>;

export type PaidTokensWithdrawnEventFilter =
  TypedEventFilter<PaidTokensWithdrawnEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface TokenContractDeployedEventObject {
  tokenContract: string;
  tokenName: string;
  tokenSymbol: string;
  tokenParams: IMarketplace.TokenParamsStructOutput;
}
export type TokenContractDeployedEvent = TypedEvent<
  [string, string, string, IMarketplace.TokenParamsStructOutput],
  TokenContractDeployedEventObject
>;

export type TokenContractDeployedEventFilter =
  TypedEventFilter<TokenContractDeployedEvent>;

export interface TokenParamsUpdatedEventObject {
  tokenContract: string;
  tokenParams: IMarketplace.TokenParamsStructOutput;
}
export type TokenParamsUpdatedEvent = TypedEvent<
  [string, IMarketplace.TokenParamsStructOutput],
  TokenParamsUpdatedEventObject
>;

export type TokenParamsUpdatedEventFilter =
  TypedEventFilter<TokenParamsUpdatedEvent>;

export interface TokenSuccessfullyExchangedEventObject {
  acceptRequestParams: IMarketplace.AcceptRequestParamsStructOutput;
  nftRequestInfo: IMarketplace.NFTRequestInfoStructOutput;
}
export type TokenSuccessfullyExchangedEvent = TypedEvent<
  [
    IMarketplace.AcceptRequestParamsStructOutput,
    IMarketplace.NFTRequestInfoStructOutput
  ],
  TokenSuccessfullyExchangedEventObject
>;

export type TokenSuccessfullyExchangedEventFilter =
  TypedEventFilter<TokenSuccessfullyExchangedEvent>;

export interface TokenSuccessfullyPurchasedEventObject {
  mintedTokenPrice: BigNumber;
  paidTokensAmount: BigNumber;
  buyParams: IMarketplace.BuyParamsStructOutput;
  paymentType: number;
}
export type TokenSuccessfullyPurchasedEvent = TypedEvent<
  [BigNumber, BigNumber, IMarketplace.BuyParamsStructOutput, number],
  TokenSuccessfullyPurchasedEventObject
>;

export type TokenSuccessfullyPurchasedEventFilter =
  TypedEventFilter<TokenSuccessfullyPurchasedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface MarketPlace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketPlaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __Marketplace_init(
      baseTokenContractsURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptRequest(
      requestParams_: IMarketplace.AcceptRequestParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToken(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      tokenParams_: IMarketplace.TokenParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    baseTokenContractsURI(overrides?: CallOverrides): Promise<[string]>;

    buyTokenWithERC20(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyTokenWithETH(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyTokenWithNFT(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyTokenWithVoucher(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      permitSig_: IMarketplace.SigDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelNFTRequest(
      requestId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNFTRequest(
      tokenContract_: PromiseOrValue<string>,
      nftContract_: PromiseOrValue<string>,
      nftId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveTokenContractsCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count_: BigNumber }>;

    getAllPendingRequestsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBriefTokenInfo(
      tokenContracts_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [IMarketplace.BriefTokenInfoStructOutput[]] & {
        baseTokenParams_: IMarketplace.BriefTokenInfoStructOutput[];
      }
    >;

    getBriefTokenInfoPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IMarketplace.BriefTokenInfoStructOutput[]]>;

    getDetailedTokenInfo(
      tokenContracts_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [IMarketplace.DetailedTokenInfoStructOutput[]] & {
        detailedTokenParams_: IMarketplace.DetailedTokenInfoStructOutput[];
      }
    >;

    getDetailedTokenInfoPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IMarketplace.DetailedTokenInfoStructOutput[]]>;

    getInjector(
      overrides?: CallOverrides
    ): Promise<[string] & { injector_: string }>;

    getNFTRequestsInfo(
      requestsId_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [IMarketplace.NFTRequestInfoStructOutput[]] & {
        nftRequestsInfo_: IMarketplace.NFTRequestInfoStructOutput[];
      }
    >;

    getPendingRequestsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTokenContractsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenContractsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getUserPendingRequestsCount(
      userAddr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserPendingRequestsPart(
      userAddr_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUserTokensPart(
      userAddr_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IMarketplace.UserTokensStructOutput[]] & {
        userTokens_: IMarketplace.UserTokensStructOutput[];
      }
    >;

    nextRequestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    setBaseTokenContractsURI(
      baseTokenContractsURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTokenParams(
      tokenContract_: PromiseOrValue<string>,
      newTokenParams_: IMarketplace.TokenParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawCurrency(
      tokenAddr_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      desiredAmount_: PromiseOrValue<BigNumberish>,
      withdrawAll_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawNFTs(
      nft_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      tokenIds_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  __Marketplace_init(
    baseTokenContractsURI_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptRequest(
    requestParams_: IMarketplace.AcceptRequestParamsStruct,
    sig_: IMarketplace.SigDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToken(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    tokenParams_: IMarketplace.TokenParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  baseTokenContractsURI(overrides?: CallOverrides): Promise<string>;

  buyTokenWithERC20(
    buyParams_: IMarketplace.BuyParamsStruct,
    sig_: IMarketplace.SigDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyTokenWithETH(
    buyParams_: IMarketplace.BuyParamsStruct,
    sig_: IMarketplace.SigDataStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyTokenWithNFT(
    buyParams_: IMarketplace.BuyParamsStruct,
    sig_: IMarketplace.SigDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyTokenWithVoucher(
    buyParams_: IMarketplace.BuyParamsStruct,
    sig_: IMarketplace.SigDataStruct,
    permitSig_: IMarketplace.SigDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelNFTRequest(
    requestId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNFTRequest(
    tokenContract_: PromiseOrValue<string>,
    nftContract_: PromiseOrValue<string>,
    nftId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveTokenContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getAllPendingRequestsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getBriefTokenInfo(
    tokenContracts_: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<IMarketplace.BriefTokenInfoStructOutput[]>;

  getBriefTokenInfoPart(
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.BriefTokenInfoStructOutput[]>;

  getDetailedTokenInfo(
    tokenContracts_: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<IMarketplace.DetailedTokenInfoStructOutput[]>;

  getDetailedTokenInfoPart(
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.DetailedTokenInfoStructOutput[]>;

  getInjector(overrides?: CallOverrides): Promise<string>;

  getNFTRequestsInfo(
    requestsId_: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<IMarketplace.NFTRequestInfoStructOutput[]>;

  getPendingRequestsPart(
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTokenContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenContractsPart(
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUserPendingRequestsCount(
    userAddr_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserPendingRequestsPart(
    userAddr_: PromiseOrValue<string>,
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserTokensPart(
    userAddr_: PromiseOrValue<string>,
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.UserTokensStructOutput[]>;

  nextRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  setBaseTokenContractsURI(
    baseTokenContractsURI_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDependencies(
    contractsRegistry_: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInjector(
    injector_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTokenParams(
    tokenContract_: PromiseOrValue<string>,
    newTokenParams_: IMarketplace.TokenParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawCurrency(
    tokenAddr_: PromiseOrValue<string>,
    recipient_: PromiseOrValue<string>,
    desiredAmount_: PromiseOrValue<BigNumberish>,
    withdrawAll_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawNFTs(
    nft_: PromiseOrValue<string>,
    recipient_: PromiseOrValue<string>,
    tokenIds_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __Marketplace_init(
      baseTokenContractsURI_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptRequest(
      requestParams_: IMarketplace.AcceptRequestParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      tokenParams_: IMarketplace.TokenParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    baseTokenContractsURI(overrides?: CallOverrides): Promise<string>;

    buyTokenWithERC20(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTokenWithETH(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTokenWithNFT(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTokenWithVoucher(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      permitSig_: IMarketplace.SigDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelNFTRequest(
      requestId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createNFTRequest(
      tokenContract_: PromiseOrValue<string>,
      nftContract_: PromiseOrValue<string>,
      nftId_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveTokenContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPendingRequestsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getBriefTokenInfo(
      tokenContracts_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<IMarketplace.BriefTokenInfoStructOutput[]>;

    getBriefTokenInfoPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.BriefTokenInfoStructOutput[]>;

    getDetailedTokenInfo(
      tokenContracts_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<IMarketplace.DetailedTokenInfoStructOutput[]>;

    getDetailedTokenInfoPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.DetailedTokenInfoStructOutput[]>;

    getInjector(overrides?: CallOverrides): Promise<string>;

    getNFTRequestsInfo(
      requestsId_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<IMarketplace.NFTRequestInfoStructOutput[]>;

    getPendingRequestsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTokenContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenContractsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUserPendingRequestsCount(
      userAddr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPendingRequestsPart(
      userAddr_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserTokensPart(
      userAddr_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.UserTokensStructOutput[]>;

    nextRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    setBaseTokenContractsURI(
      baseTokenContractsURI_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateTokenParams(
      tokenContract_: PromiseOrValue<string>,
      newTokenParams_: IMarketplace.TokenParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCurrency(
      tokenAddr_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      desiredAmount_: PromiseOrValue<BigNumberish>,
      withdrawAll_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNFTs(
      nft_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      tokenIds_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BaseTokenContractsURIUpdated(string)"(
      newBaseTokenContractsURI?: null
    ): BaseTokenContractsURIUpdatedEventFilter;
    BaseTokenContractsURIUpdated(
      newBaseTokenContractsURI?: null
    ): BaseTokenContractsURIUpdatedEventFilter;

    "NFTRequestCanceled(uint256)"(
      requestId?: PromiseOrValue<BigNumberish> | null
    ): NFTRequestCanceledEventFilter;
    NFTRequestCanceled(
      requestId?: PromiseOrValue<BigNumberish> | null
    ): NFTRequestCanceledEventFilter;

    "NFTRequestCreated(uint256,address,address,address,uint256)"(
      requestId?: PromiseOrValue<BigNumberish> | null,
      requester?: PromiseOrValue<string> | null,
      tokenContract?: PromiseOrValue<string> | null,
      nftContract?: null,
      nftId?: null
    ): NFTRequestCreatedEventFilter;
    NFTRequestCreated(
      requestId?: PromiseOrValue<BigNumberish> | null,
      requester?: PromiseOrValue<string> | null,
      tokenContract?: PromiseOrValue<string> | null,
      nftContract?: null,
      nftId?: null
    ): NFTRequestCreatedEventFilter;

    "NFTTokensWithdrawn(address,address,uint256[])"(
      nftAddr?: PromiseOrValue<string> | null,
      recipient?: null,
      tokenIDs?: null
    ): NFTTokensWithdrawnEventFilter;
    NFTTokensWithdrawn(
      nftAddr?: PromiseOrValue<string> | null,
      recipient?: null,
      tokenIDs?: null
    ): NFTTokensWithdrawnEventFilter;

    "PaidTokensWithdrawn(address,address,uint256)"(
      tokenAddr?: PromiseOrValue<string> | null,
      recipient?: null,
      amount?: null
    ): PaidTokensWithdrawnEventFilter;
    PaidTokensWithdrawn(
      tokenAddr?: PromiseOrValue<string> | null,
      recipient?: null,
      amount?: null
    ): PaidTokensWithdrawnEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "TokenContractDeployed(address,string,string,tuple)"(
      tokenContract?: PromiseOrValue<string> | null,
      tokenName?: null,
      tokenSymbol?: null,
      tokenParams?: null
    ): TokenContractDeployedEventFilter;
    TokenContractDeployed(
      tokenContract?: PromiseOrValue<string> | null,
      tokenName?: null,
      tokenSymbol?: null,
      tokenParams?: null
    ): TokenContractDeployedEventFilter;

    "TokenParamsUpdated(address,tuple)"(
      tokenContract?: PromiseOrValue<string> | null,
      tokenParams?: null
    ): TokenParamsUpdatedEventFilter;
    TokenParamsUpdated(
      tokenContract?: PromiseOrValue<string> | null,
      tokenParams?: null
    ): TokenParamsUpdatedEventFilter;

    "TokenSuccessfullyExchanged(tuple,tuple)"(
      acceptRequestParams?: null,
      nftRequestInfo?: null
    ): TokenSuccessfullyExchangedEventFilter;
    TokenSuccessfullyExchanged(
      acceptRequestParams?: null,
      nftRequestInfo?: null
    ): TokenSuccessfullyExchangedEventFilter;

    "TokenSuccessfullyPurchased(uint256,uint256,tuple,uint8)"(
      mintedTokenPrice?: null,
      paidTokensAmount?: null,
      buyParams?: null,
      paymentType?: null
    ): TokenSuccessfullyPurchasedEventFilter;
    TokenSuccessfullyPurchased(
      mintedTokenPrice?: null,
      paidTokensAmount?: null,
      buyParams?: null,
      paymentType?: null
    ): TokenSuccessfullyPurchasedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    __Marketplace_init(
      baseTokenContractsURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptRequest(
      requestParams_: IMarketplace.AcceptRequestParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToken(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      tokenParams_: IMarketplace.TokenParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    baseTokenContractsURI(overrides?: CallOverrides): Promise<BigNumber>;

    buyTokenWithERC20(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyTokenWithETH(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyTokenWithNFT(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyTokenWithVoucher(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      permitSig_: IMarketplace.SigDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelNFTRequest(
      requestId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNFTRequest(
      tokenContract_: PromiseOrValue<string>,
      nftContract_: PromiseOrValue<string>,
      nftId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveTokenContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPendingRequestsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getBriefTokenInfo(
      tokenContracts_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBriefTokenInfoPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDetailedTokenInfo(
      tokenContracts_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDetailedTokenInfoPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInjector(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTRequestsInfo(
      requestsId_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRequestsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenContractsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPendingRequestsCount(
      userAddr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPendingRequestsPart(
      userAddr_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTokensPart(
      userAddr_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    setBaseTokenContractsURI(
      baseTokenContractsURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTokenParams(
      tokenContract_: PromiseOrValue<string>,
      newTokenParams_: IMarketplace.TokenParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawCurrency(
      tokenAddr_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      desiredAmount_: PromiseOrValue<BigNumberish>,
      withdrawAll_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawNFTs(
      nft_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      tokenIds_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __Marketplace_init(
      baseTokenContractsURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptRequest(
      requestParams_: IMarketplace.AcceptRequestParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      tokenParams_: IMarketplace.TokenParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    baseTokenContractsURI(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTokenWithERC20(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyTokenWithETH(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyTokenWithNFT(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyTokenWithVoucher(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigDataStruct,
      permitSig_: IMarketplace.SigDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelNFTRequest(
      requestId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNFTRequest(
      tokenContract_: PromiseOrValue<string>,
      nftContract_: PromiseOrValue<string>,
      nftId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveTokenContractsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllPendingRequestsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBriefTokenInfo(
      tokenContracts_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBriefTokenInfoPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDetailedTokenInfo(
      tokenContracts_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDetailedTokenInfoPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInjector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNFTRequestsInfo(
      requestsId_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRequestsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenContractsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenContractsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPendingRequestsCount(
      userAddr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPendingRequestsPart(
      userAddr_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTokensPart(
      userAddr_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextRequestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBaseTokenContractsURI(
      baseTokenContractsURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenParams(
      tokenContract_: PromiseOrValue<string>,
      newTokenParams_: IMarketplace.TokenParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCurrency(
      tokenAddr_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      desiredAmount_: PromiseOrValue<BigNumberish>,
      withdrawAll_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNFTs(
      nft_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      tokenIds_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
