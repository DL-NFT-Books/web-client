/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IMarketplace {
  export type TokenParamsStruct = {
    pricePerOneToken: PromiseOrValue<BigNumberish>;
    minNFTFloorPrice: PromiseOrValue<BigNumberish>;
    voucherTokensAmount: PromiseOrValue<BigNumberish>;
    voucherTokenContract: PromiseOrValue<string>;
    fundsRecipient: PromiseOrValue<string>;
    isNFTBuyable: PromiseOrValue<boolean>;
    isDisabled: PromiseOrValue<boolean>;
  };

  export type TokenParamsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    boolean,
    boolean
  ] & {
    pricePerOneToken: BigNumber;
    minNFTFloorPrice: BigNumber;
    voucherTokensAmount: BigNumber;
    voucherTokenContract: string;
    fundsRecipient: string;
    isNFTBuyable: boolean;
    isDisabled: boolean;
  };

  export type PaymentDetailsStruct = {
    paymentTokenAddress: PromiseOrValue<string>;
    paymentTokenPrice: PromiseOrValue<BigNumberish>;
    discount: PromiseOrValue<BigNumberish>;
    nftTokenId: PromiseOrValue<BigNumberish>;
  };

  export type PaymentDetailsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    paymentTokenAddress: string;
    paymentTokenPrice: BigNumber;
    discount: BigNumber;
    nftTokenId: BigNumber;
  };

  export type BuyParamsStruct = {
    paymentDetails: IMarketplace.PaymentDetailsStruct;
    tokenContract: PromiseOrValue<string>;
    futureTokenId: PromiseOrValue<BigNumberish>;
    endTimestamp: PromiseOrValue<BigNumberish>;
    tokenURI: PromiseOrValue<string>;
  };

  export type BuyParamsStructOutput = [
    IMarketplace.PaymentDetailsStructOutput,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    paymentDetails: IMarketplace.PaymentDetailsStructOutput;
    tokenContract: string;
    futureTokenId: BigNumber;
    endTimestamp: BigNumber;
    tokenURI: string;
  };

  export type SigStruct = {
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
    v: PromiseOrValue<BigNumberish>;
  };

  export type SigStructOutput = [string, string, number] & {
    r: string;
    s: string;
    v: number;
  };

  export type BaseTokenParamsStruct = {
    tokenContract: PromiseOrValue<string>;
    isDisabled: PromiseOrValue<boolean>;
    pricePerOneToken: PromiseOrValue<BigNumberish>;
    tokenName: PromiseOrValue<string>;
  };

  export type BaseTokenParamsStructOutput = [
    string,
    boolean,
    BigNumber,
    string
  ] & {
    tokenContract: string;
    isDisabled: boolean;
    pricePerOneToken: BigNumber;
    tokenName: string;
  };

  export type DetailedTokenParamsStruct = {
    tokenContract: PromiseOrValue<string>;
    tokenParams: IMarketplace.TokenParamsStruct;
    tokenName: PromiseOrValue<string>;
    tokenSymbol: PromiseOrValue<string>;
  };

  export type DetailedTokenParamsStructOutput = [
    string,
    IMarketplace.TokenParamsStructOutput,
    string,
    string
  ] & {
    tokenContract: string;
    tokenParams: IMarketplace.TokenParamsStructOutput;
    tokenName: string;
    tokenSymbol: string;
  };

  export type UserTokensStruct = {
    tokenContract: PromiseOrValue<string>;
    tokenIds: PromiseOrValue<BigNumberish>[];
  };

  export type UserTokensStructOutput = [string, BigNumber[]] & {
    tokenContract: string;
    tokenIds: BigNumber[];
  };
}

export interface MarketPlaceInterface extends utils.Interface {
  functions: {
    "__Marketplace_init(string)": FunctionFragment;
    "addToken(string,string,(uint256,uint256,uint256,address,address,bool,bool))": FunctionFragment;
    "baseTokenContractsURI()": FunctionFragment;
    "buyTokenWithERC20(((address,uint256,uint256,uint256),address,uint256,uint256,string),(bytes32,bytes32,uint8))": FunctionFragment;
    "buyTokenWithETH(((address,uint256,uint256,uint256),address,uint256,uint256,string),(bytes32,bytes32,uint8))": FunctionFragment;
    "buyTokenWithNFT(((address,uint256,uint256,uint256),address,uint256,uint256,string),(bytes32,bytes32,uint8))": FunctionFragment;
    "buyTokenWithVoucher(((address,uint256,uint256,uint256),address,uint256,uint256,string),(bytes32,bytes32,uint8))": FunctionFragment;
    "getActiveTokenContractsCount()": FunctionFragment;
    "getBaseTokenParams(address[])": FunctionFragment;
    "getBaseTokenParamsPart(uint256,uint256)": FunctionFragment;
    "getDetailedTokenParams(address[])": FunctionFragment;
    "getDetailedTokenParamsPart(uint256,uint256)": FunctionFragment;
    "getInjector()": FunctionFragment;
    "getTokenContractsCount()": FunctionFragment;
    "getTokenContractsPart(uint256,uint256)": FunctionFragment;
    "getUserTokensPart(address,uint256,uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "setBaseTokenContractsURI(string)": FunctionFragment;
    "setDependencies(address,bytes)": FunctionFragment;
    "setInjector(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateAllParams(address,string,string,(uint256,uint256,uint256,address,address,bool,bool))": FunctionFragment;
    "withdrawCurrency(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__Marketplace_init"
      | "addToken"
      | "baseTokenContractsURI"
      | "buyTokenWithERC20"
      | "buyTokenWithETH"
      | "buyTokenWithNFT"
      | "buyTokenWithVoucher"
      | "getActiveTokenContractsCount"
      | "getBaseTokenParams"
      | "getBaseTokenParamsPart"
      | "getDetailedTokenParams"
      | "getDetailedTokenParamsPart"
      | "getInjector"
      | "getTokenContractsCount"
      | "getTokenContractsPart"
      | "getUserTokensPart"
      | "onERC721Received"
      | "pause"
      | "paused"
      | "setBaseTokenContractsURI"
      | "setDependencies"
      | "setInjector"
      | "unpause"
      | "updateAllParams"
      | "withdrawCurrency"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__Marketplace_init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      IMarketplace.TokenParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "baseTokenContractsURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenWithERC20",
    values: [IMarketplace.BuyParamsStruct, IMarketplace.SigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenWithETH",
    values: [IMarketplace.BuyParamsStruct, IMarketplace.SigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenWithNFT",
    values: [IMarketplace.BuyParamsStruct, IMarketplace.SigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenWithVoucher",
    values: [IMarketplace.BuyParamsStruct, IMarketplace.SigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveTokenContractsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseTokenParams",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseTokenParamsPart",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDetailedTokenParams",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDetailedTokenParamsPart",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInjector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenContractsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenContractsPart",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokensPart",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBaseTokenContractsURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDependencies",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInjector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateAllParams",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      IMarketplace.TokenParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCurrency",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "__Marketplace_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenContractsURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenWithERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenWithETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenWithNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenWithVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveTokenContractsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokenParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseTokenParamsPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDetailedTokenParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDetailedTokenParamsPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInjector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenContractsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenContractsPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokensPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBaseTokenContractsURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDependencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInjector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAllParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCurrency",
    data: BytesLike
  ): Result;

  events: {
    "BaseTokenContractsURIUpdated(string)": EventFragment;
    "PaidTokensWithdrawn(address,address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "TokenContractDeployed(address,string,string,tuple)": EventFragment;
    "TokenContractParamsUpdated(address,string,string,tuple)": EventFragment;
    "TokenSuccessfullyPurchased(address,uint256,uint256,tuple,uint8)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BaseTokenContractsURIUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaidTokensWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenContractDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenContractParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSuccessfullyPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface BaseTokenContractsURIUpdatedEventObject {
  newBaseTokenContractsURI: string;
}
export type BaseTokenContractsURIUpdatedEvent = TypedEvent<
  [string],
  BaseTokenContractsURIUpdatedEventObject
>;

export type BaseTokenContractsURIUpdatedEventFilter =
  TypedEventFilter<BaseTokenContractsURIUpdatedEvent>;

export interface PaidTokensWithdrawnEventObject {
  tokenAddr: string;
  recipient: string;
  amount: BigNumber;
}
export type PaidTokensWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  PaidTokensWithdrawnEventObject
>;

export type PaidTokensWithdrawnEventFilter =
  TypedEventFilter<PaidTokensWithdrawnEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface TokenContractDeployedEventObject {
  tokenContract: string;
  tokenName: string;
  tokenSymbol: string;
  tokenParams: IMarketplace.TokenParamsStructOutput;
}
export type TokenContractDeployedEvent = TypedEvent<
  [string, string, string, IMarketplace.TokenParamsStructOutput],
  TokenContractDeployedEventObject
>;

export type TokenContractDeployedEventFilter =
  TypedEventFilter<TokenContractDeployedEvent>;

export interface TokenContractParamsUpdatedEventObject {
  tokenContract: string;
  tokenName: string;
  tokenSymbol: string;
  tokenParams: IMarketplace.TokenParamsStructOutput;
}
export type TokenContractParamsUpdatedEvent = TypedEvent<
  [string, string, string, IMarketplace.TokenParamsStructOutput],
  TokenContractParamsUpdatedEventObject
>;

export type TokenContractParamsUpdatedEventFilter =
  TypedEventFilter<TokenContractParamsUpdatedEvent>;

export interface TokenSuccessfullyPurchasedEventObject {
  recipient: string;
  mintedTokenPrice: BigNumber;
  paidTokensAmount: BigNumber;
  buyParams: IMarketplace.BuyParamsStructOutput;
  paymentType: number;
}
export type TokenSuccessfullyPurchasedEvent = TypedEvent<
  [string, BigNumber, BigNumber, IMarketplace.BuyParamsStructOutput, number],
  TokenSuccessfullyPurchasedEventObject
>;

export type TokenSuccessfullyPurchasedEventFilter =
  TypedEventFilter<TokenSuccessfullyPurchasedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface MarketPlace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketPlaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __Marketplace_init(
      baseTokenContractsURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addToken(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      tokenParams_: IMarketplace.TokenParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    baseTokenContractsURI(overrides?: CallOverrides): Promise<[string]>;

    buyTokenWithERC20(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyTokenWithETH(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyTokenWithNFT(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyTokenWithVoucher(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveTokenContractsCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count_: BigNumber }>;

    getBaseTokenParams(
      tokenContract_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [IMarketplace.BaseTokenParamsStructOutput[]] & {
        baseTokenParams_: IMarketplace.BaseTokenParamsStructOutput[];
      }
    >;

    getBaseTokenParamsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IMarketplace.BaseTokenParamsStructOutput[]]>;

    getDetailedTokenParams(
      tokenContracts_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<
      [IMarketplace.DetailedTokenParamsStructOutput[]] & {
        detailedTokenParams_: IMarketplace.DetailedTokenParamsStructOutput[];
      }
    >;

    getDetailedTokenParamsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IMarketplace.DetailedTokenParamsStructOutput[]]>;

    getInjector(
      overrides?: CallOverrides
    ): Promise<[string] & { injector_: string }>;

    getTokenContractsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenContractsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getUserTokensPart(
      userAddr_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IMarketplace.UserTokensStructOutput[]] & {
        userTokens_: IMarketplace.UserTokensStructOutput[];
      }
    >;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    setBaseTokenContractsURI(
      baseTokenContractsURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAllParams(
      tokenContract_: PromiseOrValue<string>,
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      newTokenParams_: IMarketplace.TokenParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawCurrency(
      tokenAddr_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  __Marketplace_init(
    baseTokenContractsURI_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addToken(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    tokenParams_: IMarketplace.TokenParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  baseTokenContractsURI(overrides?: CallOverrides): Promise<string>;

  buyTokenWithERC20(
    buyParams_: IMarketplace.BuyParamsStruct,
    sig_: IMarketplace.SigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyTokenWithETH(
    buyParams_: IMarketplace.BuyParamsStruct,
    sig_: IMarketplace.SigStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyTokenWithNFT(
    buyParams_: IMarketplace.BuyParamsStruct,
    sig_: IMarketplace.SigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyTokenWithVoucher(
    buyParams_: IMarketplace.BuyParamsStruct,
    sig_: IMarketplace.SigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveTokenContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getBaseTokenParams(
    tokenContract_: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<IMarketplace.BaseTokenParamsStructOutput[]>;

  getBaseTokenParamsPart(
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.BaseTokenParamsStructOutput[]>;

  getDetailedTokenParams(
    tokenContracts_: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<IMarketplace.DetailedTokenParamsStructOutput[]>;

  getDetailedTokenParamsPart(
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.DetailedTokenParamsStructOutput[]>;

  getInjector(overrides?: CallOverrides): Promise<string>;

  getTokenContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenContractsPart(
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getUserTokensPart(
    userAddr_: PromiseOrValue<string>,
    offset_: PromiseOrValue<BigNumberish>,
    limit_: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.UserTokensStructOutput[]>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  setBaseTokenContractsURI(
    baseTokenContractsURI_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDependencies(
    contractsRegistry_: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInjector(
    injector_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAllParams(
    tokenContract_: PromiseOrValue<string>,
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    newTokenParams_: IMarketplace.TokenParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawCurrency(
    tokenAddr_: PromiseOrValue<string>,
    recipient_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __Marketplace_init(
      baseTokenContractsURI_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      tokenParams_: IMarketplace.TokenParamsStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    baseTokenContractsURI(overrides?: CallOverrides): Promise<string>;

    buyTokenWithERC20(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTokenWithETH(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTokenWithNFT(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTokenWithVoucher(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveTokenContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseTokenParams(
      tokenContract_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<IMarketplace.BaseTokenParamsStructOutput[]>;

    getBaseTokenParamsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.BaseTokenParamsStructOutput[]>;

    getDetailedTokenParams(
      tokenContracts_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<IMarketplace.DetailedTokenParamsStructOutput[]>;

    getDetailedTokenParamsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.DetailedTokenParamsStructOutput[]>;

    getInjector(overrides?: CallOverrides): Promise<string>;

    getTokenContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenContractsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getUserTokensPart(
      userAddr_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.UserTokensStructOutput[]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    setBaseTokenContractsURI(
      baseTokenContractsURI_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateAllParams(
      tokenContract_: PromiseOrValue<string>,
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      newTokenParams_: IMarketplace.TokenParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawCurrency(
      tokenAddr_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BaseTokenContractsURIUpdated(string)"(
      newBaseTokenContractsURI?: null
    ): BaseTokenContractsURIUpdatedEventFilter;
    BaseTokenContractsURIUpdated(
      newBaseTokenContractsURI?: null
    ): BaseTokenContractsURIUpdatedEventFilter;

    "PaidTokensWithdrawn(address,address,uint256)"(
      tokenAddr?: PromiseOrValue<string> | null,
      recipient?: null,
      amount?: null
    ): PaidTokensWithdrawnEventFilter;
    PaidTokensWithdrawn(
      tokenAddr?: PromiseOrValue<string> | null,
      recipient?: null,
      amount?: null
    ): PaidTokensWithdrawnEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "TokenContractDeployed(address,string,string,tuple)"(
      tokenContract?: PromiseOrValue<string> | null,
      tokenName?: null,
      tokenSymbol?: null,
      tokenParams?: null
    ): TokenContractDeployedEventFilter;
    TokenContractDeployed(
      tokenContract?: PromiseOrValue<string> | null,
      tokenName?: null,
      tokenSymbol?: null,
      tokenParams?: null
    ): TokenContractDeployedEventFilter;

    "TokenContractParamsUpdated(address,string,string,tuple)"(
      tokenContract?: PromiseOrValue<string> | null,
      tokenName?: null,
      tokenSymbol?: null,
      tokenParams?: null
    ): TokenContractParamsUpdatedEventFilter;
    TokenContractParamsUpdated(
      tokenContract?: PromiseOrValue<string> | null,
      tokenName?: null,
      tokenSymbol?: null,
      tokenParams?: null
    ): TokenContractParamsUpdatedEventFilter;

    "TokenSuccessfullyPurchased(address,uint256,uint256,tuple,uint8)"(
      recipient?: PromiseOrValue<string> | null,
      mintedTokenPrice?: null,
      paidTokensAmount?: null,
      buyParams?: null,
      paymentType?: null
    ): TokenSuccessfullyPurchasedEventFilter;
    TokenSuccessfullyPurchased(
      recipient?: PromiseOrValue<string> | null,
      mintedTokenPrice?: null,
      paidTokensAmount?: null,
      buyParams?: null,
      paymentType?: null
    ): TokenSuccessfullyPurchasedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    __Marketplace_init(
      baseTokenContractsURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addToken(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      tokenParams_: IMarketplace.TokenParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    baseTokenContractsURI(overrides?: CallOverrides): Promise<BigNumber>;

    buyTokenWithERC20(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyTokenWithETH(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyTokenWithNFT(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyTokenWithVoucher(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveTokenContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseTokenParams(
      tokenContract_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseTokenParamsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDetailedTokenParams(
      tokenContracts_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDetailedTokenParamsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInjector(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenContractsCount(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenContractsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTokensPart(
      userAddr_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    setBaseTokenContractsURI(
      baseTokenContractsURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAllParams(
      tokenContract_: PromiseOrValue<string>,
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      newTokenParams_: IMarketplace.TokenParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawCurrency(
      tokenAddr_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __Marketplace_init(
      baseTokenContractsURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      tokenParams_: IMarketplace.TokenParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    baseTokenContractsURI(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyTokenWithERC20(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyTokenWithETH(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyTokenWithNFT(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyTokenWithVoucher(
      buyParams_: IMarketplace.BuyParamsStruct,
      sig_: IMarketplace.SigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveTokenContractsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseTokenParams(
      tokenContract_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseTokenParamsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDetailedTokenParams(
      tokenContracts_: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDetailedTokenParamsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInjector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenContractsCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenContractsPart(
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTokensPart(
      userAddr_: PromiseOrValue<string>,
      offset_: PromiseOrValue<BigNumberish>,
      limit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBaseTokenContractsURI(
      baseTokenContractsURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDependencies(
      contractsRegistry_: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInjector(
      injector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAllParams(
      tokenContract_: PromiseOrValue<string>,
      name_: PromiseOrValue<string>,
      symbol_: PromiseOrValue<string>,
      newTokenParams_: IMarketplace.TokenParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawCurrency(
      tokenAddr_: PromiseOrValue<string>,
      recipient_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
